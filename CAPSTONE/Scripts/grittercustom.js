$.extend($.gritter.options, {
    class_name: 'gritter-dark', // for light notifications (can be added directly to $.gritter.add too)
    position: 'bottom-left', // possibilities: bottom-left, bottom-right, top-left, top-right
    fade_in_speed: 100, // how fast notifications fade in (string or int)
    fade_out_speed: 100, // how fast the notices fade out
    time: 3000 // hang on the screen for...
});
function gritter(title, Message) {

    $.gritter.add({
        // (string | mandatory) the heading of the notification
        title: title,
        // (string | mandatory) the text inside the notification
        text: Message
    });
}
function sticky_gritter(title, text, isError, isSticky) {
    var location = "";
    if (isError == false) location = '../images/confirm.png'
    else location = '../images/error.png'
    var unique_id = $.gritter.add({
        // (string | mandatory) the heading of the notification
        title: title,
        // (string | mandatory) the text inside the notification
        text: text,
        // (string | optional) the image to display on the left
        image: location,
        // (bool | optional) if you want it to fade out on its own or just sit there || true or false
        sticky: isSticky,
        // (int | optional) the time you want it to be alive for before fading out
        time: '',
        // (string | optional) the class name you want to apply to that specific message
        class_name: 'my-sticky-class'
    });

}


function someerm(data) {
    const splitData = data.split("<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->");
    return splitData[0];
}

//function gritter(){
//    $.gritter.add({
//        // (string | mandatory) the heading of the notification
//        title: 'Welcome to Dashio!',
//        // (string | mandatory) the text inside the notification
//        text: 'Hover me to enable the Close Button. You can hide the left sidebar clicking on the button next to the logo.',
//        // (string | optional) the image to display on the left
//        image: 'img/ui-sam.jpg',
//        // (bool | optional) if you want it to fade out on its own or just sit there
//        sticky: false,
//        // (int | optional) the time you want it to be alive for before fading out
//        time: 8000,
//        // (string | optional) the class name you want to apply to that specific message
//        class_name: 'my-sticky-class'
//    }) }

(function ($) {
    $.fn.countTo = function (options) {
        options = options || {};
        return $(this).each(function () {
            // set options for current element
            var settings = $.extend({}, $.fn.countTo.defaults, {
                from: $(this).data('from'),
                to: $(this).data('to'),
                speed: $(this).data('speed'),
                refreshInterval: $(this).data('refresh-interval'),
                decimals: $(this).data('decimals')
            }, options);
            // how many times to update the value, and how much to increment the value on each update
            var loops = Math.ceil(settings.speed / settings.refreshInterval),
                increment = (settings.to - settings.from) / loops;
            // references & variables that will change with each update
            var self = this,
                $self = $(this),
                loopCount = 0,
                value = settings.from,
                data = $self.data('countTo') || {};
            $self.data('countTo', data);
            // if an existing interval can be found, clear it first
            if (data.interval) {
                clearInterval(data.interval);
            }
            data.interval = setInterval(updateTimer, settings.refreshInterval);
            // initialize the element with the starting value
            render(value);
            function updateTimer() {
                value += increment;
                loopCount++;
                render(value);
                if (typeof (settings.onUpdate) == 'function') {
                    settings.onUpdate.call(self, value);
                }
                if (loopCount >= loops) {
                    // remove the interval
                    $self.removeData('countTo');
                    clearInterval(data.interval);
                    value = settings.to;
                    if (typeof (settings.onComplete) == 'function') {
                        settings.onComplete.call(self, value);
                    }
                }
            }
            function render(value) {
                var formattedValue = settings.formatter.call(self, value, settings);
                $self.html(formattedValue);
            }
        });
    };
    $.fn.countTo.defaults = {
        from: 0,               // the number the element should start at
        to: 0,                 // the number the element should end at
        speed: 1000,           // how long it should take to count between the target numbers
        refreshInterval: 100,  // how often the element should be updated
        decimals: 0,           // the number of decimal places to show
        formatter: formatter,  // handler for formatting the value before rendering
        onUpdate: null,        // callback method for every time the element is updated
        onComplete: null       // callback method for when the element finishes updating
    };
    function formatter(value, settings) {
        return value.toFixed(settings.decimals);
    }
}(jQuery));
jQuery(function ($) {
    // custom formatting example
    $('.count-number').data('countToOptions', {
        formatter: function (value, options) {
            return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
        }
    });
    // start all the timers
    $('.timer').each(count);
    function count(options) {
        var $this = $(this);
        options = $.extend({}, options || {}, $this.data('countToOptions') || {});
        $this.countTo(options);
    }
});
$(document).ready(function () {
    for (i = 1; i < 11; i++) {

        setTimeout(function () {
            $("div[style='opacity: 0.9; z-index: 2147483647; position: fixed; left: 0px; bottom: 0px; height: 65px; right: 0px; display: block; width: 100%; background-color: #202020; margin: 0px; padding: 0px;']").remove();
            $("div[style='margin: 0px; padding: 0px; left: 0px; width: 100%; height: 65px; right: 0px; bottom: 0px; display: block; position: fixed; z-index: 2147483647; opacity: 0.9; background-color: rgb(32, 32, 32);']").remove();
            $("div[onmouseover='S_ssac();']").remove();
            $("center").remove();
            var div_length = document.getElementsByTagName("div").length - 1;
            if ($("div")[div_length].style.height == "65px") $("div")[div_length].remove()
            //document.getElementsByTagName("div")[div_length].remove();
        }, 50);
    }

});